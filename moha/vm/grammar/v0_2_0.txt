IGNORE: "[ \t\n]";
IDENTIFIER: "[a-zA-Z_][a-zA-Z0-9_]*";
STRING_LITERAL: "\\"([^\\\\"]*)\\"";
DECIMAL_LITERAL: "0|[1-9][0-9]*";
OCTAL_LITERAL: "0[oO][0-7]+";
HEX_LITERAL: "0[xX][0-9a-fA-F]+";
BIN_LITERAL: "0[bB][0-1]+";
FLOAT_LITERAL: "\-?(0|[1-9][0-9]*)(\.[0-9]+)([eE][\+\-]?[0-9]+)?";

main: >import*< >statement*< >export?< [EOF];
import: <import_module> [";"] | <import_members_from_module> [";"];
import_module: ["import"] STRING_LITERAL;
import_members_from_module: ["import"] import_members ["from"] STRING_LITERAL;
import_members: IDENTIFIER [","] >import_members< | IDENTIFIER;
export: <export_all_members_as_module> [";"] | <export_selected_members_as_module> [";"];
export_all_members_as_module: ["export"] ["*"] ["as"] STRING_LITERAL;
export_selected_members_as_module: ["export"] export_members ["as"] STRING_LITERAL;
export_members: IDENTIFIER [","] >export_members< | IDENTIFIER;
statement: expression [";"] | <compound_statement> | <simple_statement> [";"];
compound_statement: <block> | <if> | <do> | <def>;
simple_statement: <pass> | <abort> | <return> | <assignment> | <unbound>;
block: ["{"] >statement+< ["}"];
guardcommand: ["("] expression [")"] block;
if: ["if"] guardcommand+;
do: ["do"] guardcommand+;
def: ["def"] def_name def_arguments block;
def_name: <IDENTIFIER>;
def_arguments: ["("] [")"] | ["("] >args< [")"];
pass: ["pass"];
return: ["return"] expression?;
abort: ["abort"] expression;
assignment: assignment_left  ["="] assignment_right;
assignment_left: IDENTIFIER >selector*<;
assignment_right: <expression>;
unbound: ["del"] >unbound_target<;
unbound_target: IDENTIFIER >selector+<;
expression: <test>;
test: <or_test>;
or_test: and_test >(["||"] and_test)+< | <and_test>;
and_test: not_test >(["&&"] not_test)+< | <not_test>;
not_test: ["!"] not_test | <comparison>;
comparison: or_expr comparison_op or_expr | <or_expr>;
comparison_op: <"=="> | <"!="> | <"<"> | <"<="> | <">"> | <">="> | <"in">;
or_expr: xor_expr >(["|"] xor_expr)+< | <xor_expr>;
xor_expr: and_expr >(["^"] and_expr)+< | <and_expr>;
and_expr: shift_expr >(["&"] shift_expr)+< | <shift_expr>;
shift_expr: arith_expr >(shift_op arith_expr)+< | <arith_expr>;
shift_op: <"<<"> | <">>">;
arith_expr: term >(arith_op term)+< | <term>;
arith_op: <"+"> | <"-">;
term: factor >(term_op factor)+< | <factor>;
term_op: <"*"> | <"/"> | <"%">;
factor: factor_op factor | <primary_expression>;
factor_op: <"+"> | <"-"> | <"~">;
primary_expression: atom >primary_expression_rest+< | <atom>;
primary_expression_rest: <selector> | ["("] <arguments> [")"] | ["("] [")"];
selector: <identifier_selector> | <index_selector>;
identifier_selector: ["."] IDENTIFIER;
index_selector: ["["] expression ["]"];
arguments: expression [","] >arguments< | expression;
array_literal: ["["] ["]"] | ["["] >array_elements< ["]"];
array_elements: expression [","] >array_elements< | expression;
object_literal: ["{"] ["}"] | ["{"] >object_entries< ["}"];
object_entries: object_entry ([","] object_entry)* ","?;
object_entry: <object_identifier_entry> | <object_string_entry>;
object_identifier_entry: IDENTIFIER [":"] object_entry_value;
object_string_entry: STRING_LITERAL [":"] object_entry_value;
object_entry_value: <closure> | <expression>;
closure: ["def"] ["("] args [")"] block;
args: IDENTIFIER [","] >args< | IDENTIFIER;
unary_op: <"+"> | <"-"> | <"!">;
binary_op: <"||"> | <"&&"> | <"=="> | <"!="> | <"<"> | <"<="> | <">"> | <">="> | <"+"> | <"-"> | <"|"> | <"^"> | <"*"> | <"/"> | <"%"> | <"<<"> | <">>"> | <"&"> | <"&^"> | <"in">;
atom: <literal> | <IDENTIFIER> | <array_literal> | <object_literal> | <parenthesized_form> | <closure>;
parenthesized_form: ["("] <expression> [")"];
integer_literal: <DECIMAL_LITERAL> | <OCTAL_LITERAL> | <HEX_LITERAL >| <BIN_LITERAL>;
boolean_literal: "true" | "false";
null_literal: "null";
literal: <null_literal> | <boolean_literal> | <integer_literal> | <FLOAT_LITERAL> | <STRING_LITERAL>;
